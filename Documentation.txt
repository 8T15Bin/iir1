/*******************************************************************************

"A Collection of Useful C++ Classes for Digital Signal Processing"
 By Vinnie Falco and further developed by Bernd Porr.

--------------------------------------------------------------------------------

License: MIT License (http://www.opensource.org/licenses/mit-license.php)
Copyright (c) 2009 by Vinnie Falco
Copyright (c) 2011 by Bernd Porr

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

********************************************************************************

="A Collection of Useful C++ Classes for Digital Signal Processing"=
_By Vincent Falco -- adapted by Bernd Porr_

"Techniques for digital signal processing are well guarded and held
close to the chest, as they have valuable applications for multimedia
content. The black art of Infinite Impulse Response ("IIR") filtering
has remained shrouded in secrecy with little publicly available source
code....until now."

Building on the work of cherished luminaries such as Sophocles
Orfanidis, Andreas Antoniou, Martin Holters, and Udo Zolzer, this
library harnesses the power of C++ templates to solve a useful problem
in digital signal processing: the realization of IIR filters of
arbitrary order and prescribed specifications with various properties
such as Butterworth, Chebyshev and Python based coefficients. The
library is provided under the MIT license and is therefore fully
compatible with proprietary usage.

Classes are designed as independent re-usable building blocks. Use
some or all of the provided features, or extend the functionality by
writing your own objects that plug into the robust framework. Only the
code that you need will get linked into your application. Here's a
list of features:

	* Exclusive focus on IIR filters
	* Causal/realtime processing with single sample in and signal sample out filter functions
	* Complete implementation of all "RBJ Biquad" Cookbook filter formulas
	* Butterworth, Chebyshev and Bessel designs
	* Low Pass, High Pass, Band Pass, Band Stop transformations
	* Low, High, and Band Shelf filter implementations for most types
	* Smooth interpolation of filter settings, pole/zeros, and biquad coefficients to achieve seamless parameter changes
	* Representation of digital filters using poles and zeros
	* Realization using Direct Form I, Direct Form II, or user provided class
	* Fully factored to minimize template instantiations
	* "Design" layer provides runtime introspection into a filter
	* Utility template functions for manipulating buffers of sample data
	* No calls to malloc or new, great for embedded systems
	* No external dependencies, just the standard C++ library!

Using these filters is easy:

{{{
    // Create a Chebyshev type I Band Stop filter of order 3
    const int order = 3;
    Iir::ChebyshevI::BandStop <order> f;
    f.setup (44100,// sample rate
             4000, // center frequency
             880,  // band width
             1);   // ripple dB
	     
    // sample by sample	     
    a = f.filter(a);
}}}

Credits

  The initial code was written by the author Vinnie Falco and then
  further developed by Bernd Porr <www.berndporr.me.uk>.

  Some filter ideas are based on a java applet (http://www.falstad.com/dfilter/)
  developed by Paul Falstad.


Bibliography

  "High-Order Digital Parametric Equalizer Design"
   Sophocles J. Orfanidis
   (Journal of the Audio Engineering Society, vol 53. pp 1026-1046)

  http://crca.ucsd.edu/~msp/techniques/v0.08/book-html/node1.html
 
  "Spectral Transformations for digital filters"
   A. G. Constantinides, B.Sc.(Eng.) Ph.D.
   (Proceedings of the IEEE, vol. 117, pp. 1585-1590, August 1970)


DOCUMENTATION

The doc directory contains the full class/function documentation as a PDF.
Run doxygen to generate the HTML manual. It's strongly recommended to
check out the examples in the demo directory.

Here is a brief summary:

All symbols are in the Iir namespace.

Filter family namespaces

  Each family of filters is given its own namespace. Currently these namespaces
  include:

  Butterworth:  Filters with Butterworth response
  ChebyshevI:   Filters using Chebyshev polynomials (ripple in the passband)
  ChebyshevII:  "Inverse Chebyshev" filters (ripple in the stopband)
  Bessel:       Uses Bessel polynomials, theoretically with linear phase
  RBJ:          Filters from the RBJ Cookbook and IIRNotch
  Custom:       Coefficients provided by Python's scipy and simple pole/zero filters.

User filters / filter classes

  Within each namespace we have a set of "user filters" (each one is an example
  of a FilterClass). For example, the raw filters in the Butterworth namespace are:

  Butterworth::LowPass
  Butterworth::HighPass
  Butterworth::BandPass
  Butterworth::BandStop
  Butterworth::LowShelf
  Butterworth::HighShelf
  Butterworth::BandShelf

  When a class template (such as SimpleFilter) requires a FilterClass, it is
  expecting an identifier of a user filter. For example, Butterworth::LowPass. The
  user filters do not have any support for introspection or the Params style of
  changing filter settings. All they offer is a setup() function for updating
  the IIR coefficients to a given set of parameters.

2nd Order Biquads

  2nd order IIR implementations, called Biquads, are cascaded to perform
  the actual number crunching:

  DirectFormI (RBJ)
  *  y[n] = (b0/a0)*x[n] + (b1/a0)*x[n-1] + (b2/a0)*x[n-2]
  *                      - (a1/a0)*y[n-1] - (a2/a0)*y[n-2]  

  DirectFormII (default)
  *  v[n] =         x[n] - (a1/a0)*v[n-1] - (a2/a0)*v[n-2]
  *  y(n) = (b0/a0)*v[n] + (b1/a0)*v[n-1] + (b2/a0)*v[n-2]
